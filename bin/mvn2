#!/usr/bin/env ruby

require 'optparse'
require 'yaml'
require 'net/http'
require 'rubygems'
require 'everyday-cli-utils'
include EverydayCliUtils
import :maputil, :format, :kmeans, :option
require 'mvn2/plugin'
require 'everyday-plugins'

include EverydayPlugins

Plugins.load_plugins 'mvn2'

#abcd   hijkl nop  stuvw y 012      9
#    efg     m   qr     x z   345678

class MyOptions
  extend OptionUtil

  default_settings toggle: true

  defaults_option 'mvn2-defaults.yaml', %w(-1 --set-defaults), desc: 'set the defaults so you can just run mvn2 without any parameters (local to each folder)'
  global_defaults_option '~/mvn2-defaults.yaml', %w(-2 --set-global-defaults), desc: 'set the global defaults so you can just run mvn2 without any parameters (global per user)'

  show_defaults_option %w(-3 --show-defaults), desc: 'show the defaults that are currently set'

  help_option ['--help'], desc: 'print out this help'
end

Plugins.get :option, MyOptions
Plugins.get :option_with_param, MyOptions

MyOptions.parse!

options = MyOptions.options

Plugins.set_var :options, options

Signal.trap('SIGINT') {
  puts "\nBuild Canceled\n\n"
  exit 1
}

class String
  def start_with_any?(*strs)
    strs.empty? ? false : strs.any? { |str| start_with?(str) }
  end
end

Plugins.get :color_override

class Mvn2Runner
  HEADLESS    = ' -Djava.awt.headless=true'
  INFO_LINE   = '[INFO] ------------------------------------------------------------------------'
  BUILD_REGEX = /\[INFO\] Building (?!(jar|war|zip))/

  def initialize(options)
    @options = options
    setup_cmd
    puts '> ' << @cmd
    Plugins.set_var :cmd, @cmd
    Plugins.set_var :cmd_clean, @cmd_clean
  end

  def setup_cmd
    flags      = Plugins.get :command_flag
    goals      = Plugins.get :goal_override
    @cmd       = "mvn #{goals}#{flags}#{HEADLESS} 2>&1"
    @cmd_clean = @cmd[0...(-5-HEADLESS.length)]
  end

  def run_and_filter_output
    Plugins.get :before_run
    @result = Plugins.get :runner
    Plugins.get :after_run
  end

  def run
    Plugins.get :before_start
    run_and_filter_output
    Plugins.get :after_end

    operation_name = Plugins.get :operation_name
    Plugins.set_var :message_text, "#{operation_name} #{(@result ? 'Successful' : 'Failed')}"

    Plugins.get :notification
    Plugins.get :after_notification
  end
end

Mvn2Runner.new(options).run
exit 1 unless Plugins.get_var :result